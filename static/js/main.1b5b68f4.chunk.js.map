{"version":3,"sources":["components/Header.js","pages/home/Home.js","pages/about/About.js","pages/services/Services.js","pages/contact/Contact.js","pages/NotFound/NotFound.js","routes/routes.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","document","querySelector","className","onClick","this","openMenu","href","closeMenu","to","Component","Home","About","Services","Contact","NotFound","Routes","path","component","exact","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gYAgDeA,G,0EAxCb,WAAYC,GAAQ,uCACZA,G,uDAGUC,SAASC,cAAc,SAC/BC,UAAY,mB,kCAIJF,SAASC,cAAc,SAC/BC,UAAY,S,+BAIpB,OACE,4BAAQA,UAAU,WACd,yBAAKA,UAAU,aACb,uBACEC,QAASC,KAAKC,SACdH,UAAU,uBAAuBI,KAAK,SAFxC,QAKA,wBAAIJ,UAAU,QACZ,wBAAIC,QAASC,KAAKG,UAAUL,UAAU,yBAAtC,QACA,wBAAIA,UAAU,aACZ,kBAAC,IAAD,CAAMA,UAAU,mBAAmBM,GAAG,UAAtC,iBAEF,wBAAIN,UAAU,aACZ,kBAAC,IAAD,CAAMA,UAAU,mBAAmBM,GAAG,eAAtC,gBAEF,wBAAIN,UAAU,aACZ,kBAAC,IAAD,CAAMA,UAAU,mBAAmBM,GAAG,YAAtC,mB,GAhCKC,cCMNC,E,uKARX,OACE,6BACE,kBAAC,EAAD,W,GAJWD,aCSJE,E,uKARX,OACE,0C,GAHcF,aCULG,E,uKARX,OACE,6C,GAHiBH,aCURI,E,uKARX,OACE,4C,GAHgBJ,aCUPK,E,uKARX,OACE,6C,GAHiBL,aCuBRM,E,uKAfX,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,WAAWC,UAAWJ,IAClC,kBAAC,IAAD,CAAOG,KAAK,eAAYC,UAAWL,IACnC,kBAAC,IAAD,CAAOI,KAAK,SAASC,UAAWN,IAChC,kBAAC,IAAD,CAAOO,OAAK,EAACF,KAAK,QAAQC,UAAWP,IACrC,kBAAC,IAAD,CAAOQ,OAAK,EAACF,KAAK,IAAIC,UAAWP,IACjC,kBAAC,IAAD,CAAOO,UAAWH,U,GAVPL,a,MCENU,MANf,WACE,OACE,kBAAC,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF3B,SAAS4B,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1b5b68f4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport './Menu.css';\nimport './BtnMenu.css';\nimport './Reset.css';\nimport './Header.css';\n\nclass Header extends Component {\n  constructor(props) {\n    super(props);\n  }\n  openMenu() {\n    const menuBar = document.querySelector('.menu');\n    menuBar.className = 'menu menu_open';\n  }\n\n  closeMenu() {\n    const menuBar = document.querySelector('.menu');\n    menuBar.className = 'menu';\n  }\n\n  render() {\n    return (\n      <header className=\"heading\">\n          <nav className=\"Wrap-Menu\">\n            <a\n              onClick={this.openMenu}\n              className=\"btnMenu btnMenu_open\" href=\"#menu\">\n              Menu\n            </a>\n            <ul className=\"menu\">\n              <li onClick={this.closeMenu}className=\"btnMenu btnMenu_close\">Sair</li>\n              <li className=\"menu-item\">\n                <Link className=\"menu-item-action\" to=\"/sobre\">Sobre nós</Link>\n              </li>\n              <li className=\"menu-item\">\n                <Link className=\"menu-item-action\" to=\"serviços\">Serviços</Link>\n              </li>\n              <li className=\"menu-item\">\n                <Link className=\"menu-item-action\" to=\"/contato\">Contato</Link>\n              </li>\n            </ul>\n          </nav>\n      </header>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport Header from '../../components/Header';\n\nclass Home extends Component {\n  render() {\n    return (\n      <div>\n        <Header />\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from 'react';\n\nclass About extends Component {\n  render() {\n    return (\n      <div>\n        ABOUT\n      </div>\n    );\n  }\n}\n\nexport default About;\n","import React, { Component } from 'react';\n\nclass Services extends Component {\n  render() {\n    return (\n      <div>\n        Services\n      </div>\n    );\n  }\n}\n\nexport default Services;\n","import React, { Component } from 'react';\n\nclass Contact extends Component {\n  render() {\n    return (\n      <div>\n        Contact\n      </div>\n    );\n  }\n}\n\nexport default Contact;\n","import React, { Component } from 'react';\n\nclass NotFound extends Component {\n  render() {\n    return (\n      <div>\n        NotFound\n      </div>\n    );\n  }\n}\n\nexport default NotFound;\n","import React, { Component } from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Home from '../pages/home/Home';\nimport About from '../pages/about/About';\nimport Services from '../pages/services/Services'\nimport Contact from '../pages/contact/Contact'\nimport NotFound from '../pages/NotFound/NotFound';\n\nclass Routes extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <Switch>\n          <Route path=\"/contato\" component={Contact} />\n          <Route path=\"/serviços\" component={Services} />\n          <Route path=\"/sobre\" component={About} />\n          <Route exact path=\"/home\" component={Home} />\n          <Route exact path=\"/\" component={Home} />\n          <Route component={NotFound} />\n        </Switch>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default Routes;\n","import React from 'react';\nimport Routes from './routes/routes';\nimport './App.css';\n\nfunction App() {\n  return (\n    <Routes />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}